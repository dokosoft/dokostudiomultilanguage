---
import BaseLayout from "@layouts/BaseLayout.astro";
import CTA from "@components/CTA.astro";
import Landing from "@components/Landing.astro";
import { getLocalePath,t } from "i18n:astro";

// Optimize our landing image and pass it as props to the BaseLayout (for preloading) and Landing (for rendering)
import {getOptimizedImage} from "@utils/utils"
import landingImage from "@assets/images/WebBannerBackgroundIllustration.jpg" // <-- THE PATH TO THE ASSET YOU WANT TO PRELOAD - The asset must live in src
const optimizedImage = await getOptimizedImage(landingImage)
---

<BaseLayout
  title={t("home:services.landing")}
  description="Meta description for the page"
  preloadedImage = {optimizedImage}
>
  <!-- ============================================ -->
  <!--                    LANDING                   -->
  <!-- ============================================ -->

  <Landing 
    title={t("home:services.title")} 
    image={optimizedImage}
    url="/services"
  />

<!-- ============================================ -->
<!--                  Services                    -->
<!-- ============================================ -->

<section id="services-1131">
  <div class="cs-container">
    <div class="cs-content">
      <span class="cs-topper">{t("services:topper")}</span>
      <h2 class="cs-title">{t("services:title")}</h2>
      <p class="cs-text">
        {t("services:p")}
      </p>
    </div>

    <ul class="cs-card-group">
      <li class="cs-item">
        <div class="cs-image-group">
          <img class="cs-icon" loading="lazy" decoding="async" src="/assets/svgs/static.svg" alt="website icon" width="48" height="48">
          <img class="cs-graphic" loading="lazy" decoding="async" src="/assets/svgs/charity-shape.svg" alt="" width="100" height="103" aria-hidden="true">
        </div>
        <div class="cs-flex">
          <h3 class="cs-h3">
            <a href={getLocalePath("/services/static-websites-business")}>{t("services:static.title")}</a>
          </h3>
          <p class="cs-item-text">
            {t("services:static.p")}
          </p>
        </div>
      </li>

      <li class="cs-item">
        <div class="cs-image-group">
          <img class="cs-icon" loading="lazy" decoding="async" src="/assets/svgs/seo.svg" alt="seo icon" width="48" height="48">
          <img class="cs-graphic" loading="lazy" decoding="async" src="/assets/svgs/charity-shape.svg" alt="" width="100" height="103" aria-hidden="true">
        </div>
        <div class="cs-flex">
          <h3 class="cs-h3">
            <a href={getLocalePath("/services/seo")}>{t("services:seo.title")}</a>
          </h3>
          <p class="cs-item-text">
            {t("services:seo.p")}
          </p>
        </div>
      </li>

      <li class="cs-item">
        <div class="cs-image-group">
          <img class="cs-icon" loading="lazy" decoding="async" src="/assets/svgs/gmb.svg" alt="google business icon" width="48" height="48">
          <img class="cs-graphic" loading="lazy" decoding="async" src="/assets/svgs/charity-shape.svg" alt="" width="100" height="103" aria-hidden="true">
        </div>
        <div class="cs-flex">
          <h3 class="cs-h3">
            <a href={getLocalePath("/services/google-business-pages-management")}>{t("services:googlemb.title")}</a>
          </h3>
          <p class="cs-item-text">
            {t("services:googlemb.p")}
          </p>
        </div>
      </li>

      <li class="cs-item">
        <div class="cs-image-group">
          <img class="cs-icon" loading="lazy" decoding="async" src="/assets/svgs/branding.svg" alt="branding icon" width="48" height="48">
          <img class="cs-graphic" loading="lazy" decoding="async" src="/assets/svgs/charity-shape.svg" alt="" width="100" height="103" aria-hidden="true">
        </div>
        <div class="cs-flex">
          <h3 class="cs-h3">
            <a href={getLocalePath("/services/branding")}>{t("services:branding.title")}</a>
          </h3>
          <p class="cs-item-text">
            {t("services:branding.p")}
          </p>
        </div>
      </li>
    </ul>
  </div>
</section>

  <CTA />
</BaseLayout>

<style lang="less">
/*-- -------------------------- -->
<---         Services           -->
<--- -------------------------- -*/

/* Mobile - 360px */
@media only screen and (min-width: 0rem) {
    #services-1131 {
        padding: var(--sectionPadding);

        .cs-container {
            width: 100%;
            max-width: (1280/16rem);
            margin: auto;
            display: flex;
            flex-direction: column;
            align-items: center;
            /* 48px - 64px */
            gap: clamp(3rem, 6vw, 4rem);
        }

        .cs-content {
            /* set text align to left if content needs to be left aligned */
            text-align: center;
            width: 100%;
            display: flex;
            flex-direction: column;
            /* centers content horizontally, set to flex-start to left align */
            align-items: center;
        }

        .cs-card-group {
            margin: 0;
            padding: 0;
            width: 100%;
            display: grid;
            grid-template-columns: repeat(12, 1fr);
            /* 16px - 20px */
            gap: clamp(1rem, 2.3vw, 1.25rem);
        }

        .cs-item {
            width: 100%;
            text-align: center;
            list-style: none;
            margin: 0;
            /* 24px - 32px */
            padding: clamp(1.5rem, 3vw, 2rem);
            background-color: #fff;
            border: 1px solid #e8e8e8;
            border-radius: (16/16rem);
            /* prevents padding and border from affecting height and width */
            box-sizing: border-box;
            grid-column: span 12;
            grid-row: span 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
            z-index: 1;
            transition:
                box-shadow 0.3s,
                border-color 0.3s;

            &:hover {
                box-shadow: #067bc099 0px 0px 26px,#067bc08c 0px 0px 0px;
                border-color: transparent;
                .cs-h3 {
                    color: var(--primary);
                }
            }
        }

        .cs-image-group {
            width: (100/16rem);
            height: auto;
            /* 20px - 24px */
            margin: 0 0 clamp(1.25rem, 2.5vw, 1.5rem);
            display: flex;
            justify-content: center;
            align-items: center;
            /* prevents flexbox from squishing it */
            flex: none;
            position: relative;
        }

        .cs-icon {
            width: (48/16rem);
            height: auto;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .cs-graphic {
            width: 100%;
            height: auto;
        }

        .cs-h3 {
            text-align: inherit;
            margin: 0 0 (12/16rem) 0;
            
            a{
              font-size: clamp(1.25rem, 2.5vw, 1.5625rem);
              text-decoration: none;
              color: var(--headerColorWhite);
              transition: color 0.3s;
              line-height: 1.2em;
              font-weight: bold;
            }
        }

        .cs-item-text {
            /* 14px - 16px */
            font-size: clamp(0.875rem, 1.5vw, 1rem);
            line-height: 1.5em;
            max-width: (450/16rem);
            margin: 0;
            padding: 0;
            color: var(--bodyTextColor);
        }
    }
}

/* Tablet - 768px */
@media only screen and (min-width: 48rem) {
    #services-1131 {
        .cs-item {
            text-align: left;
            align-items: flex-start;
            grid-column: span 6;
        }
    }
}

/* Desktop - 1024px */
@media only screen and (min-width: 64rem) {
    #services-1131 {
        .cs-item {
            flex-direction: row;
            align-items: flex-start;
            justify-content: space-between;
        }
    }
}

/* Dark Mode */
@media only screen and (min-width: 0rem) {
    body.dark-mode {
        #services-1131 {
            .cs-item {
                background-color: var(--dark);
                border-color: rgba(255, 255, 255, 0.2);

                &:hover {
                    .cs-h3 {
                        color: var(--primary);
                    }
                }
            }

            .cs-topper {
                color: var(--primary);
            }

            .cs-title,
            .cs-text,
            .cs-h3,
            .cs-item-text {
                color: var(--bodyTextColorWhite);
            }

            .cs-text {
                opacity: 0.8;
            }

            .cs-icon {
                filter: grayscale(1) brightness(1000%);
            }

            .cs-graphic {
                opacity: 0.2;
            }
        }
    }
}
</style>
